#!/usr/bin/env zsh
# -*- vim:fenc=utf-8:et:sw=2:ts=2:sts=2
#
# Copyright (c) 2020 Enrico M. Crisostomo
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
setopt local_options
setopt local_traps
unsetopt glob_subst
unsetopt bash_rematch

set -o errexit
set -o nounset
set -o pipefail

PROG=${0}
PROGNAME=${0:t}
PROGDIR=${0:h}
BUG_REPORT=enrico.m.crisostomo@gmail.com
PACKAGE_VERSION=0.1.0

: ${VM_CPU_COUNT:=1}
: ${VM_RAM_SIZE:=2048}
: ${VM_DISK_SIZE:=8000}
: ${VM_NAME:=rancheros-vm}
: ${VM_DRIVER:=vmwarefusion}

: ${DOCKER_MACHINE_CACHE:=~/.docker/machine/cache}
: ${RANCHEROS_ISO_URL:=https://releases.rancher.com/os/latest/rancheros.iso}
: ${RANCHEROS_VMWARE_ISO_URL:=https://releases.rancher.com/os/latest/vmware/rancheros-autoformat.iso}
: ${RANCHEROS_ISO_PATH:=${DOCKER_MACHINE_CACHE}/rancheros.iso}
: ${RANCHEROS_VMWARE_ISO_PATH:=${DOCKER_MACHINE_CACHE}/rancheros-autoformat.iso}

# getopts
typeset -a help_flag
typeset -a verbose_flag
typeset -a version_flag

# Output verbosity and logging
exec 5>/dev/null

function print_verbose()
{
  local log_message=${1:?Log message is required.}

  printf -- "%s\n" ${log_message} 1>&5
}

# cleanup trap
trap '__trap' INT TERM EXIT

function __trap()
{
  local exit_code=$?
  trap - EXIT

  exec 5>&-

  exit ${exit_code}
}

# Program dependencies
typeset -a REQUIRED_PROGS=( curl docker-machine )

function check_required_programs()
{
  for p in ${REQUIRED_PROGS}
  do
    command -v ${p} > /dev/null 2>&1 ||
      {
        >&2 print "Cannot find required program: ${p}"
        exit 1
      }
  done
}

function print_version()
{
  print "${PROGNAME} ${PACKAGE_VERSION}"
  print "Copyright (C) 2020 Enrico M. Crisostomo"
  print "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
  print "This is free software: you are free to change and redistribute it."
  print "There is NO WARRANTY, to the extent permitted by law."
  print
  print "Written by Enrico M. Crisostomo"

  exit 0
}

function print_usage()
{
  print "${PROGNAME} ${PACKAGE_VERSION}"
  print
  print "Usage:"
  print "${PROGNAME} (options)* command"
  print "${PROGNAME} -h"
  print "${PROGNAME} -v"
  print
  print "Options:"
  print " -h, --help     Print this message."
  print " -v, --verbose  Print verbose output."
  print "     --version  Print the program version."
  print
  print "See the man page for more information."
  print
  print "Report bugs to <https://github.com/emcrisostomo/jwt-cli/issues>."
  print "${PROGNAME} home page: <https://github.com/emcrisostomo/jwt-cli>."

  exit 0
}

function download_vmwarefusion_iso()
{
  if [[ -e ${RANCHEROS_VMWARE_ISO_PATH} ]]
  then
    return
  fi

  curl -sfL ${RANCHEROS_VMWARE_ISO_URL} > ${RANCHEROS_VMWARE_ISO_PATH}
}

function download_virtualbox_iso()
{
  if [[ -e ${RANCHEROS_ISO_PATH} ]]
  then
    return
  fi

  curl -sfL ${RANCHEROS_ISO_URL} > ${RANCHEROS_ISO_PATH}
}

function download_iso()
{
  mkdir -p ${DOCKER_MACHINE_CACHE}

  case ${VM_DRIVER} in
    vmwarefusion)
      download_vmwarefusion_iso
      ;;
    virtualbox)
      download_virtualbox_iso
      ;;
    *)
      print "Unknown driver: ${VM_DRIVER}" >&2
      return 1
  esac
}

function create_vm()
{
  download_iso

  case ${VM_DRIVER} in
    vmwarefusion)
      docker-machine \
        create -d ${VM_DRIVER} \
        --vmwarefusion-boot2docker-url ${RANCHEROS_VMWARE_ISO_PATH} \
        --vmwarefusion-cpu-count ${VM_CPU_COUNT} \
        --vmwarefusion-memory-size ${VM_RAM_SIZE} \
        --vmwarefusion-disk-size ${VM_DISK_SIZE} \
        --vmwarefusion-no-share \
        ${VM_NAME}
      ;;

    virtualbox)
      docker-machine \
        create -d ${VM_DRIVER} \
        --virtualbox-boot2docker-url ${RANCHEROS_ISO_PATH} \
        --virtualbox-cpu-count ${VM_CPU_COUNT} \
        --virtualbox-memory ${VM_RAM_SIZE} \
        --virtualbox-disk-size ${VM_DISK_SIZE} \
        ${VM_NAME}
      ;;

    *)
      print "Unsupported driver: ${VM_DRIVER}" >&2
      return 1
      ;;
  esac
}

function __main()
{
  check_required_programs

  zparseopts -D -E \
             h=help_flag    -help=help_flag            \
             v=verbose_flag -verbose=verbose_flag      \
                            -version=version_flag

  (( ${#help_flag} ))    && print_usage
  (( ${#verbose_flag} )) && exec 5>&2
  (( ${#version_flag} )) && print_version

  if [[ ! -t 0 ]]
  then
    print "This script should be run interactively." >&2
    return 1
  fi

  (( $# == 0 )) ||
    {
      print "Invalid arguments." >&2
      return 2
    }

  create_vm
}

# main
__main $*

# Local variables:
# coding: utf-8
# mode: sh
# eval: (sh-set-shell "zsh")
# tab-width: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# sh-indentation: 2
# End:
